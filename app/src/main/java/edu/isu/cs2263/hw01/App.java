/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.isu.cs2263.hw01;

import org.apache.commons.cli.*;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * An application to evaluate simple expressions with command line and file functionality
 */

public class App {

    /**
     * Main method which handles the main execution loop
     * @param args Command Line arguments (-h, -b, -o)
     * @author Baylor McElroy
     */

    public static void main(String[] args) throws ParseException {

        //***Definition Stage***
        // create Options object
        Options options = new Options();

        // add option "-h" and "--help"
        Option help = new Option("h", "help" ,false, "print usage message");
        options.addOption(help);

        // add option "-b" and "--batch"
        Option batch = Option.builder("b")
                .argName("file")
                .hasArg(true)
                .longOpt("batch")
                .desc("batch file containing expressions to evaluate, must an absolute path or relative to user directory")
                .build();
        options.addOption(batch);

        //add option "-o" and "--output"
        Option output = Option.builder("o")
                .argName("file").hasArg(true)
                .longOpt("output")
                .desc("output file, must be an absolute path or relative to user directory")
                .build();
        options.addOption(output);

        HelpFormatter formatter = new HelpFormatter();
        String header = "Evaluation of simple mathematical expressions\n";
        String footer = "\nCopyright (C) 2022 Baylor McElroy";

        //***Parsing Stage***
        //Create a parser
        CommandLineParser parser = new DefaultParser();

        //parse the options passed as command line arguments
        CommandLine cmd = parser.parse(options, args);

        //***Interrogation Stage***

        if(args[0].equals("eval")) {

            String outputLoc;
            Path path;
            String userDirectory = System.getProperty("user.dir");
            Path userPath = Paths.get(userDirectory);

            if(cmd.hasOption("o")) {
                //output to file
                outputLoc = cmd.getOptionValue("o");
                path = Paths.get(outputLoc);
                if(!path.isAbsolute()){
                    path = Paths.get(userPath + "\\" + path);
                }
                outputLoc = path.toString();
            }
            else {
                //output to cmd
                outputLoc = ":cmd";
            }
            if(cmd.hasOption("b")) {
                //read in from batch
                String fileName = cmd.getOptionValue("b");
                path = Paths.get(fileName);
                if(!path.isAbsolute()){
                    path = Paths.get(userPath + "\\" + path);
                }
                Evaluator eval = new Evaluator(path.toString(), outputLoc);
                eval.runEvaluatorBat();
            }
            else {
                //run with no extra tags
                Evaluator eval = new Evaluator(outputLoc);
                eval.runEvaluatorCmd();
            }
        }
        //run help option
        else if (cmd.hasOption("h")) {
            formatter.printHelp("Evaluator",header, options, footer, true);
        }

    }

}
